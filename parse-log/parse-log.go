package parselog

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"sync"

	cmdargs "github.com/m/v2/cmd-args"
)

type GameData struct {
	GameName   string
	TotalKills int64
	Kills      map[string]int //	mapping from player to associated kills
	Players    map[string]bool
}

type KillData struct {
	GameName string
	Kills    map[string]int //	mapping from weapon to associated kills
}

// function to parse logs generated by Quake game using file-name provided in fileInfo object
func ParseLogs(fileInfo cmdargs.FileInfo) {

	//	opening file to read logs from
	content, err := os.Open(fileInfo.LogFile)
	if err != nil {
		fmt.Printf("Unable to read log file: %s", err)
		os.Exit(1)
	}

	//	create scanner object to read file line by line
	scanner := bufio.NewScanner(content)

	wg := sync.WaitGroup{}
	wg.Add(2)

	//	run a channel to print game info
	gameChannel := make(chan GameData)

	//	run a channel to pass kill info
	killChannel := make(chan KillData)
	//run go routines to print game info in console and generate kill in specified file
	go ReportRank(gameChannel, &wg)
	go GenerateKillReport(killChannel, fileInfo, &wg)
	defer wg.Wait()

	gameNumber := 0

	var gameInfo GameData
	var killInfo KillData
	//	read file till EOF
	for scanner.Scan() {
		//	read string from log file
		line := scanner.Text()

		//	check if new game is initialized by checking key word "InitGame" substring at 7:15
		if line[7:15] == "InitGame" {
			gameNumber++
			//	read info of a particular game
			gameInfo, killInfo = ReadGameInfo(scanner, "game_"+strconv.FormatInt(int64(gameNumber), 10))
			// send parsed info to go their respective go routines
			gameChannel <- gameInfo
			killChannel <- killInfo
		}
	}

	//	close the channels to stop printing info
	close(gameChannel)
	close(killChannel)
}
